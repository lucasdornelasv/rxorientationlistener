
afterEvaluate { project ->
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.dcendents.android-maven'
    apply plugin: "com.jfrog.bintray"

    libraryGroupId = project.libraryGroupId
    artifact = project.artifact
    libraryDescription = project.libraryDescription
    libraryVersion = project.libraryVersion

    bintrayRepo = project.bintrayRepo
    bintrayName = project.bintrayName

    siteUrl = project.siteUrl
    gitUrl = project.gitUrl

    developerId = project.developerId
    developerName = project.developerName
    developerEmail = project.developerEmail
    organization = project.organization

    licenseName = project.licenseName
    licenseUrl = project.licenseUrl
    allLicenses = project.allLicenses

    group = libraryGroupId
    version = libraryVersion

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        failOnError = false
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user", System.getenv('BINTRAY_USER'))
        key = properties.getProperty("bintray.apikey", System.getenv('BINTRAY_API_KEY'))

        publications('release')

        override = true
        dryRun = false
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            userOrg = organization   // If the repository is hosted by an organization instead of personal account.
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            publish = true
            publicDownloadNumbers = true
            version {
                name = libraryVersion
                desc = libraryDescription
                vcsTag = libraryVersion
                released = new Date()
                gpg {
                    sign = true
                    passphrase = properties.getProperty("bintray.gpg.password")
                }
            }
        }
    }

    ext.addDependency = { dependencyNode, group, name, version ->
        dependencyNode.appendNode('groupId', group)
        dependencyNode.appendNode('artifactId', name)
        dependencyNode.appendNode('version', version)
        dependencyNode.appendNode('scope', "compile")
    }

    def pomConfig = {
        licenses {
            license {
                name licenseName
                url licenseUrl
            }
        }
        developers {
            developer {
                id developerId
                name developerName
                email developerEmail
            }
        }
        scm {
            developerConnection gitUrl
            connection gitUrl
            url siteUrl
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                groupId group
                artifactId artifact
                version libraryVersion
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact androidSourcesJar
                artifact androidJavadocsJar

                pom.withXml {
                    asNode().appendNode('name', artifact)
                    asNode().appendNode('description', libraryDescription)
                    asNode().appendNode('url', siteUrl)
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            if (it.version != "unspecified") {
                                addDependency(dependencyNode, it.group, it.name, it.version)
                            } else {
                                addDependency(dependencyNode, it.getDependencyProject().findProperty("GROUP"), it.getDependencyProject().findProperty("POM_ARTIFACT_ID"), project.release.versionName)
                            }
                        }
                    }
                    asNode().children().last() + pomConfig
                }
            }
        }
    }
}